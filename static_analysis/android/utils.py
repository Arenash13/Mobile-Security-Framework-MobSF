import os
import shutil
import re
import io
from django.conf import settings

"""
This file contains some frequently used methods within code_analysis
"""
def retrieve_source_code_folder(app_dir, typ, code_type):
    '''
    Return the location of the source code folder generated by MobSF.
    As this is highly dependening on MobSF. It COULD have to be changed in
    the future

    :param str app_dir: the directory of the decompiled app
    :param str typ: the type of the decompiled app
    :param str code_type: the type of code_source you want to retrieve (java, smali,...)
    :return: the path to the source code folder
    '''
    if typ == 'apk':
        return os.path.join(app_dir, '{}_source/'.format(code_type))
    elif typ == 'studio':
        raise NotImplementedError("The folder finder for this type of folder : studio," +
                                  "has not been implemented for the moment, please consider adding the smali endpoint")
    elif typ == 'eclipse':
        raise NotImplementedError("The folder finder for this type of folder : eclipse," +
                                  "has not been implemented for the moment, please consider adding the smali endpoint")


def resolve_file_name_conflict(code_src, dir_, file):
    '''
    Change the name of the file if it contains ambigious characters

    :param str code_src: the directory of src
    :param str dir_: the subdirectory
    :param str file: the file
    :return: the path to the modified file name
    '''
    file_path = os.path.join(code_src, dir_, file)
    if '+' in file:
        file_renamed = os.path.join(code_src, dir_, file.replace('+', 'X'))
        shutil.move(file_path, file_renamed)
        file_path = file_renamed
    return file_path


def retrieve_raw_content_from_file(file, absolute_path, relative_path, extension_wanted = None, skip_classes = []):
    '''
    Retrieve the file content if it matches the file extension and if the folder
    is not to ignore

    :param str file: the file
    :param str absolute_path: the absolute path of the file
    :param str relative_path: the relative path of the file
    :param str extension_wanted: the extension that the file must have
    :param dict skip_classes:  the classes that shouldn't be read for analysis

    '''

    if (
        (extension_wanted == None or file.endswith(extension_wanted))
        and any(re.search(cls, relative_path)
                for cls in skip_classes) is False
    ):
        data = ''
        with io.open(absolute_path, mode='r', encoding='utf8',
                     errors='ignore') as file_ptr:
            data = file_ptr.read()
        return data

def get_expanded_Mobsf_skipped_classes():
    skipped_classes = settings.SKIP_CLASSES
    skipped_classes.append(r'com[\\\/]{1}xamarin[\\\/]{1}')
    skipped_classes.append(r'io[\\\/]{1}flutter[\\\/]{1}')
    return skipped_classes